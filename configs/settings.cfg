% GLOBAL
  groups = []                              # (string) name spaces (also names) of groups to be created (in addition to the defualt no name space group.)
  mode = run-genome                               # (string) mode to run MABE in [run,test]
  outputDirectory = /home/parallels/indigo_ws/src/ros_evolve/src/mabe_ros/output/                     # (string) where files will be written
  popSize = 100                            # (int) number of genomes in the populaiton
  randomSeed = 101                         # (int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 50000                             # (int) how long the program will run

% ARCHIVIST
  outputMethod = SSwD                   # (string) output method, [default, LODwAP (Line of Decent with Aggressive Pruning), SSwD (SnapShot with Delay)]

% ARCHIVIST_DEFAULT
  aveFileColumns = []                      # (string) data to be saved into average file (must be values that can generate an average). If empty, MABE will try to figure it out
  aveFileName = ave.csv                    # (string) name of average file (saves population averages)
  dominantFileName = dominant.csv          # (string) name of dominant file (saves data on dominant organism)
  dominantFileShowAllLists = 1             # (bool) lists named 'all'* in data map will be averaged and added to file. if true, raw 'all'* lists will also be added to the file
  realtimeFilesInterval = 1000               # (int) How often to write to realtime data files
  snapshotDataFilePrefix = snapshotData    # (string) prefix for name of snapshot genome file (stores genomes)
  snapshotDataInterval = 1000               # (int) How often to save a snapshot data file
  snapshotGenomeFilePrefix = snapshotGenome # (string) prefix for name of snapshot data file (stores everything but genomes)
  snapshotGenomeInterval = 1000            # (int) How often to save a snapshot genome file
  writeAveFile = 1                         # (bool) Save data to average file?
  writeDominantFile = 1                    # (bool) Save data to dominant file?
  writeSnapshotDataFiles = 1               # (bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotGenomeFiles = 1             # (bool) if true, snapshot genome files will be written (with all genomes for entire population)

% ARCHIVIST_LODWAP
  dataFileConvertAllLists = 1              # (bool) if true, lists named 'all'* in data map will be averaged and added to file
  dataFileName = data.csv                  # (string) name of genome file (stores genomes for line of decent)
  dataFileShowAllLists = 1                 # (bool) if true, lists named 'all'* in data map will be saved
  dataInterval = 100                       # (int) How often to write to data file
  genomeFileName = genome.csv              # (string) name of data file (stores everything but genomes)
  genomeInterval = 1000                    # (int) How often to write genome file
  pruneInterval = 100                      # (int) How often to attempt to prune LOD and actually write out to files
  terminateAfter = 100                     # (int) how long to run after updates (to get better coalescence)
  writeDataFile = 1                        # (bool) if true, a data file will be written
  writeGenomeFile = 1                      # (bool) if true, a genome file will be written

% ARCHIVIST_SSWD
  cleanupInterval = 100                    # (int) How often to cleanup old checkpoints
  dataFilePrefix = data                    # (string) name of genome file (stores genomes)
  dataInterval = 100                       # (int) How often to save a data file
  dataIntervalDelay = 100                   # (int) when using Snap Shot with Delay output Method, how long is the delay before saving data
  genomeFilePrefix = genome                # (string) name of data file (stores everything but genomes)
  genomeInterval = 100                    # (int) How often to save a genome file
  genomeIntervalDelay = 100                 # (int) when using Snap Shot with Delay output Method, how long is the delay before saving genomes
  writeDataFiles = 1                       # (bool) if true, data files will be written
  writeGenomeFiles = 1                     # (bool) if true, genome files will be written

% GLOBAL_TEST_MODE
  visualizePopulationFile = /home/parallels/indigo_ws/src/ros_mabe/src/mabe/output/genome_12900.csv # (string) in test mode, this population will be used to generate visualization

% OPTIMIZER
  elitism = 0                              # (int) if the chosen optimizer allows for elitism, The highest scoring brain will be included in the next generation this many times (0 = no elitism)?
  optimizer = GA                           # (string) optimizer to be used in evolution loop, [GA, Tournament, Tournament2]
  tournamentSize = 5                       # (int) how many genomes to consider when doing Tournament selection? 1 will result in random selection.
