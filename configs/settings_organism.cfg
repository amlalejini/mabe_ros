% BRAIN
  bitsPerBrainAddress = 8                  # (int) how many bits are evaluated to determine the brain addresses
  bitsPerCodon = 8                         # (int) how many bits are evaluated to determine the codon addresses
  brainType = Markov                       # (string) brain to be used in evolution loop, [Markov, Wire, Human]
  hiddenNodes = 8                          # (int) number of hidden nodes, if brain type supports hiden nodes
  serialProcessing = 0                     # (bool) outputs from units will write to nodes, not nodesNext

% BRAIN_HUMAN
  actionMapFileName = actionMap.txt        # (string) if useActionMap = true, use this file
  useActionMap = 0                         # (bool) if true, an action map will be used to translate user input

% BRAIN_MARKOV_GATES
  deterministicGate = 1                    # (bool) set to true to enable deterministic gates?
  deterministicGate_InitialCount = 6       # (int) seed genome with this many start codons
  feedBackGate = 0                         # (bool) set to true to enable feedback gates
  feedBackGate_InitialCount = 3            # (int) seed genome with this many start codons
  fixedEpsilonGate = 0                     # (bool) set to true to enable epsilon gates
  fixedEpsilonGate_InitialCount = 3        # (int) seed genome with this many start codons
  geneticProgramingGate = 0                # (bool) set to true to enable GP (what?) gates
  geneticProgramingGate_InitialCount = 3   # (int) seed genome with this many start codons
  neuronGate = 0                           # (bool) set to true to enable Neuron gates
  neuronGate_InitialCount = 3              # (int) seed genome with this many start codons
  probabilisticGate = 0                    # (bool) set to true to enable probabilistic gates
  probabilisticGate_InitialCount = 3       # (int) seed genome with this many start codons
  thresholdGate = 0                        # (bool) set to true to enable threshold gates
  thresholdGate_InitialCount = 3           # (int) seed genome with this many start codons
  tritGate = 0                             # (bool) set to true to enable tritDeterministic gates
  tritGate_InitialCount = 3                # (int) seed genome with this many start codons
  voidGate = 0                             # (bool) set to true to enable void gates
  voidGate_InitialCount = 3                # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_FIXED_EPSILON
  failProbability = 0.05                   # (double) chance that an output from a FixedEpsilonGate gate will be randomized

% BRAIN_MARKOV_GATES_GP
  constValueMax = 1.0                      # (double) for the const values, max value the genome can generate
  constValueMin = -1.0                     # (double) for the const values, min value the genome can generate

% BRAIN_MARKOV_GATES_NEURON
  allowRepression = 0                      # (bool) if false, neuronGates only fire if charge exceeds threshold; if true, neuronGates can also exist which always fire, except when charge exceeds threshold
  decayRateMax = 0.0                       # (double) amount charge will decay (towards 0) per update
  decayRateMin = 0.0                       # (double) amount charge will decay (towards 0) per update
  deliveryChargeFromNode = 0               # (bool) if true, gate will have additional input, which will be used as deliveryCharge
  deliveryChargeMax = 1.0                  # (double) output charge
  deliveryChargeMin = -1.0                 # (double) output charge
  deliveryError = 0.0                      # (double) error in deliveryCharge... charge -= random[0,deliveryError)
  dischargeBehavior = 0                    # (int) what happens when gate fires (-1: let genome decide, 0: clear charge, 1: 'reduce' by delivery charge, 2: 1/2 charge)
  numInputsMax = 3                         # (int) max number of inputs to neuronGate
  numInputsMin = 3                         # (int) min number of inputs to neuronGate
  thresholdFromNode = 0                    # (bool) if true, gate will have additional input, which will be used as threshold
  thresholdMax = 1.0                       # (double) highest possible value for threshold
  thresholdMin = -1.0                      # (double) lowest possible value for threshold

% BRAIN_MARKOV_GATES_VOID
  voidGate_Probability = 0.05              # (double) chance that an output from a void gate will be set to 0

% BRAIN_WIRE
  allowNegativeCharge = 0                  # (bool) if true, wire brain can interpret negative input, deliver negative output, and charge negatively
  bitmap_InitialFillRatio = 0.2            # (double) if bitmap genomeDecodingMethod: amount of the brain that will initially be wire vs. empty
  cacheResults = 1                         # (bool) if true, t+1 nodes will be cached. If the same input is seen, the cached node values will be used.
  cacheResultsCount = 1                    # (int) input combinations will be cached this many times, after this, repeats of a given input array will look up a random value from cached values
  chargeUpdatesPerUpdate = 30              # (int) Number of charge updates per brain update
  constantInputs = 1                       # (bool) if true, input values are reset every charge update, if not, input values are set on first charge update only.
  decayDuration = 1                        # (int) length of time a cell will decay (while in decay a cell can not become charged)
  genomeDecodingMethod = bitmap            # (string) bitmap = convert genome directly, wiregenes = genes defined by start codeons, location, direction and location
  overchargeThreshold = 3                  # (int) If a cell receives this much charge or more, it will not charge
  size_depth = 10                          # (int) depth of the wire brain cube
  size_height = 10                         # (int) height of the wire brain cube
  size_width = 10                          # (int) width of the wire brain cube
  worldConnectionsSeparation = 7           # (int) distance between nodes input and output connections (I/O)

% BRAIN_WIRE_WIREGENE
  allowSimpeWires = 1                      # (bool) allow SimpleWire features (lengths of straight wire)
  allowSquiggleWires = 0                   # (bool) allow squiggleWire features (wires generated by converting genome into list of directions)
  allowWormholes = 0                       # (bool) allow Wormhole features (one directional links between distant wires)
  initialGeneCount = 50                    # (int) number of start codons to be inserted into initial genome (add even number of all - even if not allowed)
  simpleWireDirections = cardinalOnly      # (string) cardinalOnly (wires project in 6 square directions) vs diagonalsAlso (wires project on diagonals also)
  simpleWireMaxLength = 1                  # (int) maximum length of a SimpleWire (if 1, direction is effectively ignored). Wires that would project outside of brain are clipped
  squiggleWireDirections = cardinalOnly    # (string) cardinalOnly (wires project in 6 square directions) vs diagonalsAlso (wires project on diagonals also)
  squiggleWireMaxLength = 10               # (int) maximum length of a SquiggleWire (if 1, it will look just like a SimpleWire). Wires that would project outside of brain are clipped
  squiggleWireMinLength = 4                # (int) minimum length of a SquiggleWire (if 1, it will look just like a SimpleWire). Wires that would project outside of brain are clipped
  wormholesBidirectional = 0               # (int) allow Wormhole features to be bidirectional(0 = no, 1 = random, 2 = always)

% GENOME
  alphabetSize = 256.0                     # (double) alphabet size for genome
  sitesType = char                         # (string) type for sites in genome [char, int, double, bool]
  type = Circular                          # (string) genome to be used in evolution loop, [Multi, Circular]

% GENOME_CIRCULAR
  crossCount = 3                           # (int) number of crosses when performing crossover
  mutationCopyMaxSize = 200                # (int) maximum size of insertion mutation
  mutationCopyMinSize = 10                 # (int) minimum size of insertion mutation
  mutationCopyRate = 0.00002               # (double) per site insertion rate
  mutationDeletionMaxSize = 200            # (int) maximum size of insertion mutation
  mutationDeletionMinSize = 10             # (int) minimum size of insertion mutation
  mutationDeletionRate = 0.00002           # (double) per site deletion rate
  mutationPointRate = 0.005                # (double) per site point mutation rate
  sizeInitial = 2000                       # (int) starting size for genome
  sizeMax = 5000                           # (int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 400                            # (int) if genome is smaller then this, mutations will only increase chromosome size

% GENOME_MULTI
  chromosomeSizeInitial = 10000            # (int) starting size for all chromosomes in genome (genome size will be chromosomeSizeInitial * number of chromosomes * ploidy)
  chromosomeSizeMax = 20000                # (int) if a chromosome is larger then this, mutations will only decrease chromosome size
  chromosomeSizeMin = 400                  # (int) if a chromosome is smaller then this, mutations will only increase chromosome size
  chromosomes = 1                          # (int) number of chromosome pairs (i.e. if chromosomes = 2 and ploidy = 2 there will be 4 chromosomes in the genome)
  genomecrossCount = 3                     # (int) number of crosses when performing crossover
  mutationCopyMaxSize = 200                # (int) maximum size of insertion mutation
  mutationCopyMinSize = 10                 # (int) minimum size of insertion mutation
  mutationCopyRate = 0.00002               # (double) per site insertion rate
  mutationDeletionMaxSize = 200            # (int) maximum size of insertion mutation
  mutationDeletionMinSize = 10             # (int) minimum size of insertion mutation
  mutationDeletionRate = 0.00002           # (double) per site deletion rate
  mutationPointRate = 0.005                # (double) per site point mutation rate
  ploidy = 1                               # (int) number of copies of each chromosome
